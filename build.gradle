configurations {
    jaxb
}

buildscript {
	ext {
		springBootVersion = '1.3.5.RELEASE'
		springRestDocsVersion = '1.0.1.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
		classpath('io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE')
	}
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot' 
apply plugin: 'io.spring.dependency-management'

repositories {
	mavenLocal()
	maven { url 'https://repo.spring.io/libs-snapshot' }
	mavenCentral()
}

ant.includeantruntime = false

task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "${projectDir}/src/main/resources/wsdl/EventStreamAdminService.wsdl"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir, schema: schema,
                    package: "br.produban.bdm.wso2.eventstreamadmin") {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
                    debugLevel: "lines,vars,source", includeantruntime: "true" ,
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}

task genJaxb2 {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb2"
    ext.classesDir = "${buildDir}/classes/jaxb2"
    ext.schema = "${projectDir}/src/main/resources/wsdl/EventProcessorAdminService.wsdl"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir, schema: schema,
                    package: "br.produban.bdm.wso2.eventprocessoradmin") {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
                    debugLevel: "lines,vars,source", includeantruntime: "true" ,
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}

// end::wsdl[]

group = 'br.produban'

sourceCompatibility = 1.8
targetCompatibility = 1.8


jar {
	baseName = 'rule-service'
	version = '0.0.7-SNAPSHOT'
	excludes = ['**/application.yml']
	
    from genJaxb.classesDir
    from genJaxb2.classesDir
}

dependencies {
	compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
	compile('org.springframework.boot:spring-boot-starter-data-rest')
	compile('org.springframework.boot:spring-boot-devtools')
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-cache")
    
    compile("org.freemarker:freemarker")
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    compile group: 'org.springframework.security.oauth', name: 'spring-security-oauth2'
    
	compile group: 'tools.devnull', name: 'trugger', version: '5.1'

	compile group: 'org.ehcache', name: 'ehcache', version: '3.0.2'
	compile group: 'javax.cache', name: 'cache-api', version: '1.0.0'
    

	compile("org.springframework.ws:spring-ws-core")
    compile(files(genJaxb.classesDir).builtBy(genJaxb))
    compile(files(genJaxb2.classesDir).builtBy(genJaxb2))
    
    compile("org.springframework.boot:spring-boot-starter-data-gemfire")

    jaxb "com.sun.xml.bind:jaxb-xjc:2.1.7"
    
    runtime("org.springframework.shell:spring-shell:1.0.0.RELEASE")

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile("org.springframework.restdocs:spring-restdocs-mockmvc:${springRestDocsVersion}")
	testCompile("org.mockito:mockito-core:1.+")
	testCompile('io.github.benas:jpopulator:1.2.0') 
	
}

ext {
	snippetsDir = file('build/generated-snippets')
}

test {
	outputs.dir snippetsDir
	exclude '**/*IT.class'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}

task afterEclipseImport {
    dependsOn genJaxb,genJaxb2
}